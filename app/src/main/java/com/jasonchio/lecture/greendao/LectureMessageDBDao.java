package com.jasonchio.lecture.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LECTURE_MESSAGE_DB".
*/
public class LectureMessageDBDao extends AbstractDao<LectureMessageDB, Long> {

    public static final String TABLENAME = "LECTURE_MESSAGE_DB";

    /**
     * Properties of entity LectureMessageDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageId = new Property(0, long.class, "messageId", true, "_id");
        public final static Property UserHead = new Property(1, String.class, "userHead", false, "USER_HEAD");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property MessageLikeorNot = new Property(3, int.class, "messageLikeorNot", false, "MESSAGE_LIKEOR_NOT");
        public final static Property MessageLikersNum = new Property(4, int.class, "messageLikersNum", false, "MESSAGE_LIKERS_NUM");
        public final static Property MessageContent = new Property(5, String.class, "messageContent", false, "MESSAGE_CONTENT");
    }


    public LectureMessageDBDao(DaoConfig config) {
        super(config);
    }
    
    public LectureMessageDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LECTURE_MESSAGE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: messageId
                "\"USER_HEAD\" TEXT," + // 1: userHead
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"MESSAGE_LIKEOR_NOT\" INTEGER NOT NULL ," + // 3: messageLikeorNot
                "\"MESSAGE_LIKERS_NUM\" INTEGER NOT NULL ," + // 4: messageLikersNum
                "\"MESSAGE_CONTENT\" TEXT);"); // 5: messageContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LECTURE_MESSAGE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LectureMessageDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(2, userHead);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
        stmt.bindLong(4, entity.getMessageLikeorNot());
        stmt.bindLong(5, entity.getMessageLikersNum());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(6, messageContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LectureMessageDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(2, userHead);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
        stmt.bindLong(4, entity.getMessageLikeorNot());
        stmt.bindLong(5, entity.getMessageLikersNum());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(6, messageContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LectureMessageDB readEntity(Cursor cursor, int offset) {
        LectureMessageDB entity = new LectureMessageDB( //
            cursor.getLong(offset + 0), // messageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userHead
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.getInt(offset + 3), // messageLikeorNot
            cursor.getInt(offset + 4), // messageLikersNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // messageContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LectureMessageDB entity, int offset) {
        entity.setMessageId(cursor.getLong(offset + 0));
        entity.setUserHead(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageLikeorNot(cursor.getInt(offset + 3));
        entity.setMessageLikersNum(cursor.getInt(offset + 4));
        entity.setMessageContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LectureMessageDB entity, long rowId) {
        entity.setMessageId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LectureMessageDB entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LectureMessageDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
