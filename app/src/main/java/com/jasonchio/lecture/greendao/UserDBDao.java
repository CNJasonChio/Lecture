package com.jasonchio.lecture.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DB".
*/
public class UserDBDao extends AbstractDao<UserDB, Long> {

    public static final String TABLENAME = "USER_DB";

    /**
     * Properties of entity UserDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserPhone = new Property(2, String.class, "userPhone", false, "USER_PHONE");
        public final static Property UserSex = new Property(3, String.class, "userSex", false, "USER_SEX");
        public final static Property UserSchool = new Property(4, String.class, "userSchool", false, "USER_SCHOOL");
        public final static Property UserPhotoUrl = new Property(5, String.class, "userPhotoUrl", false, "USER_PHOTO_URL");
        public final static Property UserBirthday = new Property(6, String.class, "userBirthday", false, "USER_BIRTHDAY");
        public final static Property UserLatitude = new Property(7, double.class, "userLatitude", false, "USER_LATITUDE");
        public final static Property UserLongitude = new Property(8, double.class, "userLongitude", false, "USER_LONGITUDE");
        public final static Property UserFocuseLirary = new Property(9, String.class, "userFocuseLirary", false, "USER_FOCUSE_LIRARY");
        public final static Property UserWantedLecture = new Property(10, String.class, "userWantedLecture", false, "USER_WANTED_LECTURE");
        public final static Property UserComment = new Property(11, String.class, "userComment", false, "USER_COMMENT");
    }


    public UserDBDao(DaoConfig config) {
        super(config);
    }
    
    public UserDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_PHONE\" TEXT," + // 2: userPhone
                "\"USER_SEX\" TEXT," + // 3: userSex
                "\"USER_SCHOOL\" TEXT," + // 4: userSchool
                "\"USER_PHOTO_URL\" TEXT," + // 5: userPhotoUrl
                "\"USER_BIRTHDAY\" TEXT," + // 6: userBirthday
                "\"USER_LATITUDE\" REAL NOT NULL ," + // 7: userLatitude
                "\"USER_LONGITUDE\" REAL NOT NULL ," + // 8: userLongitude
                "\"USER_FOCUSE_LIRARY\" TEXT," + // 9: userFocuseLirary
                "\"USER_WANTED_LECTURE\" TEXT," + // 10: userWantedLecture
                "\"USER_COMMENT\" TEXT);"); // 11: userComment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(3, userPhone);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(4, userSex);
        }
 
        String userSchool = entity.getUserSchool();
        if (userSchool != null) {
            stmt.bindString(5, userSchool);
        }
 
        String userPhotoUrl = entity.getUserPhotoUrl();
        if (userPhotoUrl != null) {
            stmt.bindString(6, userPhotoUrl);
        }
 
        String userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindString(7, userBirthday);
        }
        stmt.bindDouble(8, entity.getUserLatitude());
        stmt.bindDouble(9, entity.getUserLongitude());
 
        String userFocuseLirary = entity.getUserFocuseLirary();
        if (userFocuseLirary != null) {
            stmt.bindString(10, userFocuseLirary);
        }
 
        String userWantedLecture = entity.getUserWantedLecture();
        if (userWantedLecture != null) {
            stmt.bindString(11, userWantedLecture);
        }
 
        String userComment = entity.getUserComment();
        if (userComment != null) {
            stmt.bindString(12, userComment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(3, userPhone);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(4, userSex);
        }
 
        String userSchool = entity.getUserSchool();
        if (userSchool != null) {
            stmt.bindString(5, userSchool);
        }
 
        String userPhotoUrl = entity.getUserPhotoUrl();
        if (userPhotoUrl != null) {
            stmt.bindString(6, userPhotoUrl);
        }
 
        String userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindString(7, userBirthday);
        }
        stmt.bindDouble(8, entity.getUserLatitude());
        stmt.bindDouble(9, entity.getUserLongitude());
 
        String userFocuseLirary = entity.getUserFocuseLirary();
        if (userFocuseLirary != null) {
            stmt.bindString(10, userFocuseLirary);
        }
 
        String userWantedLecture = entity.getUserWantedLecture();
        if (userWantedLecture != null) {
            stmt.bindString(11, userWantedLecture);
        }
 
        String userComment = entity.getUserComment();
        if (userComment != null) {
            stmt.bindString(12, userComment);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserDB readEntity(Cursor cursor, int offset) {
        UserDB entity = new UserDB( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userSchool
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userPhotoUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userBirthday
            cursor.getDouble(offset + 7), // userLatitude
            cursor.getDouble(offset + 8), // userLongitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userFocuseLirary
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userWantedLecture
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // userComment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDB entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserSchool(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPhotoUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserBirthday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserLatitude(cursor.getDouble(offset + 7));
        entity.setUserLongitude(cursor.getDouble(offset + 8));
        entity.setUserFocuseLirary(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserWantedLecture(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDB entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDB entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
