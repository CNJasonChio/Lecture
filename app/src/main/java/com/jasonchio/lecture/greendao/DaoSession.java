package com.jasonchio.lecture.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.jasonchio.lecture.greendao.CommentDB;
import com.jasonchio.lecture.greendao.InterimLectureDB;
import com.jasonchio.lecture.greendao.LectureDB;
import com.jasonchio.lecture.greendao.LibraryDB;
import com.jasonchio.lecture.greendao.UserDB;

import com.jasonchio.lecture.greendao.CommentDBDao;
import com.jasonchio.lecture.greendao.InterimLectureDBDao;
import com.jasonchio.lecture.greendao.LectureDBDao;
import com.jasonchio.lecture.greendao.LibraryDBDao;
import com.jasonchio.lecture.greendao.UserDBDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig commentDBDaoConfig;
    private final DaoConfig interimLectureDBDaoConfig;
    private final DaoConfig lectureDBDaoConfig;
    private final DaoConfig libraryDBDaoConfig;
    private final DaoConfig userDBDaoConfig;

    private final CommentDBDao commentDBDao;
    private final InterimLectureDBDao interimLectureDBDao;
    private final LectureDBDao lectureDBDao;
    private final LibraryDBDao libraryDBDao;
    private final UserDBDao userDBDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        commentDBDaoConfig = daoConfigMap.get(CommentDBDao.class).clone();
        commentDBDaoConfig.initIdentityScope(type);

        interimLectureDBDaoConfig = daoConfigMap.get(InterimLectureDBDao.class).clone();
        interimLectureDBDaoConfig.initIdentityScope(type);

        lectureDBDaoConfig = daoConfigMap.get(LectureDBDao.class).clone();
        lectureDBDaoConfig.initIdentityScope(type);

        libraryDBDaoConfig = daoConfigMap.get(LibraryDBDao.class).clone();
        libraryDBDaoConfig.initIdentityScope(type);

        userDBDaoConfig = daoConfigMap.get(UserDBDao.class).clone();
        userDBDaoConfig.initIdentityScope(type);

        commentDBDao = new CommentDBDao(commentDBDaoConfig, this);
        interimLectureDBDao = new InterimLectureDBDao(interimLectureDBDaoConfig, this);
        lectureDBDao = new LectureDBDao(lectureDBDaoConfig, this);
        libraryDBDao = new LibraryDBDao(libraryDBDaoConfig, this);
        userDBDao = new UserDBDao(userDBDaoConfig, this);

        registerDao(CommentDB.class, commentDBDao);
        registerDao(InterimLectureDB.class, interimLectureDBDao);
        registerDao(LectureDB.class, lectureDBDao);
        registerDao(LibraryDB.class, libraryDBDao);
        registerDao(UserDB.class, userDBDao);
    }
    
    public void clear() {
        commentDBDaoConfig.clearIdentityScope();
        interimLectureDBDaoConfig.clearIdentityScope();
        lectureDBDaoConfig.clearIdentityScope();
        libraryDBDaoConfig.clearIdentityScope();
        userDBDaoConfig.clearIdentityScope();
    }

    public CommentDBDao getCommentDBDao() {
        return commentDBDao;
    }

    public InterimLectureDBDao getInterimLectureDBDao() {
        return interimLectureDBDao;
    }

    public LectureDBDao getLectureDBDao() {
        return lectureDBDao;
    }

    public LibraryDBDao getLibraryDBDao() {
        return libraryDBDao;
    }

    public UserDBDao getUserDBDao() {
        return userDBDao;
    }

}
