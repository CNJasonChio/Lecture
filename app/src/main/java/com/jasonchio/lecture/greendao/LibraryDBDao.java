package com.jasonchio.lecture.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIBRARY_DB".
*/
public class LibraryDBDao extends AbstractDao<LibraryDB, Long> {

    public static final String TABLENAME = "LIBRARY_DB";

    /**
     * Properties of entity LibraryDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LibraryID = new Property(0, long.class, "libraryID", true, "_id");
        public final static Property LibraryName = new Property(1, String.class, "libraryName", false, "LIBRARY_NAME");
        public final static Property LibraryContent = new Property(2, String.class, "libraryContent", false, "LIBRARY_CONTENT");
        public final static Property LibraryUrl = new Property(3, String.class, "libraryUrl", false, "LIBRARY_URL");
        public final static Property LibraryImageUrl = new Property(4, String.class, "libraryImageUrl", false, "LIBRARY_IMAGE_URL");
        public final static Property LibraryLatitude = new Property(5, double.class, "libraryLatitude", false, "LIBRARY_LATITUDE");
        public final static Property LibraryLongitude = new Property(6, double.class, "libraryLongitude", false, "LIBRARY_LONGITUDE");
    }


    public LibraryDBDao(DaoConfig config) {
        super(config);
    }
    
    public LibraryDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIBRARY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: libraryID
                "\"LIBRARY_NAME\" TEXT," + // 1: libraryName
                "\"LIBRARY_CONTENT\" TEXT," + // 2: libraryContent
                "\"LIBRARY_URL\" TEXT," + // 3: libraryUrl
                "\"LIBRARY_IMAGE_URL\" TEXT," + // 4: libraryImageUrl
                "\"LIBRARY_LATITUDE\" REAL NOT NULL ," + // 5: libraryLatitude
                "\"LIBRARY_LONGITUDE\" REAL NOT NULL );"); // 6: libraryLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIBRARY_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LibraryDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLibraryID());
 
        String libraryName = entity.getLibraryName();
        if (libraryName != null) {
            stmt.bindString(2, libraryName);
        }
 
        String libraryContent = entity.getLibraryContent();
        if (libraryContent != null) {
            stmt.bindString(3, libraryContent);
        }
 
        String libraryUrl = entity.getLibraryUrl();
        if (libraryUrl != null) {
            stmt.bindString(4, libraryUrl);
        }
 
        String libraryImageUrl = entity.getLibraryImageUrl();
        if (libraryImageUrl != null) {
            stmt.bindString(5, libraryImageUrl);
        }
        stmt.bindDouble(6, entity.getLibraryLatitude());
        stmt.bindDouble(7, entity.getLibraryLongitude());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LibraryDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLibraryID());
 
        String libraryName = entity.getLibraryName();
        if (libraryName != null) {
            stmt.bindString(2, libraryName);
        }
 
        String libraryContent = entity.getLibraryContent();
        if (libraryContent != null) {
            stmt.bindString(3, libraryContent);
        }
 
        String libraryUrl = entity.getLibraryUrl();
        if (libraryUrl != null) {
            stmt.bindString(4, libraryUrl);
        }
 
        String libraryImageUrl = entity.getLibraryImageUrl();
        if (libraryImageUrl != null) {
            stmt.bindString(5, libraryImageUrl);
        }
        stmt.bindDouble(6, entity.getLibraryLatitude());
        stmt.bindDouble(7, entity.getLibraryLongitude());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LibraryDB readEntity(Cursor cursor, int offset) {
        LibraryDB entity = new LibraryDB( //
            cursor.getLong(offset + 0), // libraryID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // libraryName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // libraryContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // libraryUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // libraryImageUrl
            cursor.getDouble(offset + 5), // libraryLatitude
            cursor.getDouble(offset + 6) // libraryLongitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LibraryDB entity, int offset) {
        entity.setLibraryID(cursor.getLong(offset + 0));
        entity.setLibraryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLibraryContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLibraryUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLibraryImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLibraryLatitude(cursor.getDouble(offset + 5));
        entity.setLibraryLongitude(cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LibraryDB entity, long rowId) {
        entity.setLibraryID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LibraryDB entity) {
        if(entity != null) {
            return entity.getLibraryID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LibraryDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
