package com.jasonchio.lecture.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INTERIM_LECTURE_DB".
*/
public class InterimLectureDBDao extends AbstractDao<InterimLectureDB, Long> {

    public static final String TABLENAME = "INTERIM_LECTURE_DB";

    /**
     * Properties of entity InterimLectureDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LectureId = new Property(0, long.class, "lectureId", true, "_id");
        public final static Property LectureTitle = new Property(1, String.class, "lectureTitle", false, "LECTURE_TITLE");
        public final static Property LectureLocation = new Property(2, String.class, "lectureLocation", false, "LECTURE_LOCATION");
        public final static Property LectureTime = new Property(3, String.class, "lectureTime", false, "LECTURE_TIME");
        public final static Property LecutreSource = new Property(4, String.class, "lecutreSource", false, "LECUTRE_SOURCE");
        public final static Property LectureContent = new Property(5, String.class, "lectureContent", false, "LECTURE_CONTENT");
        public final static Property LectureUrl = new Property(6, String.class, "lectureUrl", false, "LECTURE_URL");
        public final static Property LecutreLikers = new Property(7, int.class, "lecutreLikers", false, "LECUTRE_LIKERS");
        public final static Property LectureImage = new Property(8, String.class, "lectureImage", false, "LECTURE_IMAGE");
        public final static Property IsWanted = new Property(9, int.class, "isWanted", false, "IS_WANTED");
        public final static Property LectureDistrict = new Property(10, String.class, "lectureDistrict", false, "LECTURE_DISTRICT");
    }


    public InterimLectureDBDao(DaoConfig config) {
        super(config);
    }
    
    public InterimLectureDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INTERIM_LECTURE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: lectureId
                "\"LECTURE_TITLE\" TEXT," + // 1: lectureTitle
                "\"LECTURE_LOCATION\" TEXT," + // 2: lectureLocation
                "\"LECTURE_TIME\" TEXT," + // 3: lectureTime
                "\"LECUTRE_SOURCE\" TEXT," + // 4: lecutreSource
                "\"LECTURE_CONTENT\" TEXT," + // 5: lectureContent
                "\"LECTURE_URL\" TEXT," + // 6: lectureUrl
                "\"LECUTRE_LIKERS\" INTEGER NOT NULL ," + // 7: lecutreLikers
                "\"LECTURE_IMAGE\" TEXT," + // 8: lectureImage
                "\"IS_WANTED\" INTEGER NOT NULL ," + // 9: isWanted
                "\"LECTURE_DISTRICT\" TEXT);"); // 10: lectureDistrict
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INTERIM_LECTURE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InterimLectureDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLectureId());
 
        String lectureTitle = entity.getLectureTitle();
        if (lectureTitle != null) {
            stmt.bindString(2, lectureTitle);
        }
 
        String lectureLocation = entity.getLectureLocation();
        if (lectureLocation != null) {
            stmt.bindString(3, lectureLocation);
        }
 
        String lectureTime = entity.getLectureTime();
        if (lectureTime != null) {
            stmt.bindString(4, lectureTime);
        }
 
        String lecutreSource = entity.getLecutreSource();
        if (lecutreSource != null) {
            stmt.bindString(5, lecutreSource);
        }
 
        String lectureContent = entity.getLectureContent();
        if (lectureContent != null) {
            stmt.bindString(6, lectureContent);
        }
 
        String lectureUrl = entity.getLectureUrl();
        if (lectureUrl != null) {
            stmt.bindString(7, lectureUrl);
        }
        stmt.bindLong(8, entity.getLecutreLikers());
 
        String lectureImage = entity.getLectureImage();
        if (lectureImage != null) {
            stmt.bindString(9, lectureImage);
        }
        stmt.bindLong(10, entity.getIsWanted());
 
        String lectureDistrict = entity.getLectureDistrict();
        if (lectureDistrict != null) {
            stmt.bindString(11, lectureDistrict);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InterimLectureDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLectureId());
 
        String lectureTitle = entity.getLectureTitle();
        if (lectureTitle != null) {
            stmt.bindString(2, lectureTitle);
        }
 
        String lectureLocation = entity.getLectureLocation();
        if (lectureLocation != null) {
            stmt.bindString(3, lectureLocation);
        }
 
        String lectureTime = entity.getLectureTime();
        if (lectureTime != null) {
            stmt.bindString(4, lectureTime);
        }
 
        String lecutreSource = entity.getLecutreSource();
        if (lecutreSource != null) {
            stmt.bindString(5, lecutreSource);
        }
 
        String lectureContent = entity.getLectureContent();
        if (lectureContent != null) {
            stmt.bindString(6, lectureContent);
        }
 
        String lectureUrl = entity.getLectureUrl();
        if (lectureUrl != null) {
            stmt.bindString(7, lectureUrl);
        }
        stmt.bindLong(8, entity.getLecutreLikers());
 
        String lectureImage = entity.getLectureImage();
        if (lectureImage != null) {
            stmt.bindString(9, lectureImage);
        }
        stmt.bindLong(10, entity.getIsWanted());
 
        String lectureDistrict = entity.getLectureDistrict();
        if (lectureDistrict != null) {
            stmt.bindString(11, lectureDistrict);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public InterimLectureDB readEntity(Cursor cursor, int offset) {
        InterimLectureDB entity = new InterimLectureDB( //
            cursor.getLong(offset + 0), // lectureId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lectureTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lectureLocation
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lectureTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lecutreSource
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lectureContent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lectureUrl
            cursor.getInt(offset + 7), // lecutreLikers
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lectureImage
            cursor.getInt(offset + 9), // isWanted
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // lectureDistrict
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InterimLectureDB entity, int offset) {
        entity.setLectureId(cursor.getLong(offset + 0));
        entity.setLectureTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLectureLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLectureTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLecutreSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLectureContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLectureUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLecutreLikers(cursor.getInt(offset + 7));
        entity.setLectureImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsWanted(cursor.getInt(offset + 9));
        entity.setLectureDistrict(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InterimLectureDB entity, long rowId) {
        entity.setLectureId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InterimLectureDB entity) {
        if(entity != null) {
            return entity.getLectureId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InterimLectureDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
